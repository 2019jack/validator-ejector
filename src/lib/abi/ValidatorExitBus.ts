/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface ValidatorExitBusInterface extends utils.Interface {
  functions: {
    "MAX_MEMBERS()": FunctionFragment;
    "addOracleMember(address)": FunctionFragment;
    "getCurrentLimit()": FunctionFragment;
    "getMaxLimit()": FunctionFragment;
    "getOracleMembers()": FunctionFragment;
    "removeOracleMember(address)": FunctionFragment;
    "reportKeysToEject(uint256[],uint256[],bytes[])": FunctionFragment;
    "setRateLimit(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_MEMBERS"
      | "addOracleMember"
      | "getCurrentLimit"
      | "getMaxLimit"
      | "getOracleMembers"
      | "removeOracleMember"
      | "reportKeysToEject"
      | "setRateLimit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_MEMBERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOracleMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracleMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reportKeysToEject",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateLimit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_MEMBERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOracleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportKeysToEject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateLimit",
    data: BytesLike
  ): Result;

  events: {
    "MemberAdded(address)": EventFragment;
    "MemberRemoved(address)": EventFragment;
    "RateLimitSet(uint256,uint256)": EventFragment;
    "ValidatorExitRequest(uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorExitRequest"): EventFragment;
}

export interface MemberAddedEventObject {
  member: string;
}
export type MemberAddedEvent = TypedEvent<[string], MemberAddedEventObject>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface MemberRemovedEventObject {
  member: string;
}
export type MemberRemovedEvent = TypedEvent<[string], MemberRemovedEventObject>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export interface RateLimitSetEventObject {
  maxLimit: BigNumber;
  limitIncreasePerBlock: BigNumber;
}
export type RateLimitSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  RateLimitSetEventObject
>;

export type RateLimitSetEventFilter = TypedEventFilter<RateLimitSetEvent>;

export interface ValidatorExitRequestEventObject {
  stakingModuleId: BigNumber;
  nodeOperatorId: BigNumber;
  validatorPubkey: string;
}
export type ValidatorExitRequestEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ValidatorExitRequestEventObject
>;

export type ValidatorExitRequestEventFilter =
  TypedEventFilter<ValidatorExitRequestEvent>;

export interface ValidatorExitBus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorExitBusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_MEMBERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracleMembers(overrides?: CallOverrides): Promise<[string[]]>;

    removeOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportKeysToEject(
      stakingModuleIds: PromiseOrValue<BigNumberish>[],
      nodeOperatorIds: PromiseOrValue<BigNumberish>[],
      validatorPubkeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRateLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      _limitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

  addOracleMember(
    _member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleMembers(overrides?: CallOverrides): Promise<string[]>;

  removeOracleMember(
    _member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportKeysToEject(
    stakingModuleIds: PromiseOrValue<BigNumberish>[],
    nodeOperatorIds: PromiseOrValue<BigNumberish>[],
    validatorPubkeys: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRateLimit(
    _maxLimit: PromiseOrValue<BigNumberish>,
    _limitIncreasePerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

    addOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleMembers(overrides?: CallOverrides): Promise<string[]>;

    removeOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reportKeysToEject(
      stakingModuleIds: PromiseOrValue<BigNumberish>[],
      nodeOperatorIds: PromiseOrValue<BigNumberish>[],
      validatorPubkeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRateLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      _limitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MemberAdded(address)"(member?: null): MemberAddedEventFilter;
    MemberAdded(member?: null): MemberAddedEventFilter;

    "MemberRemoved(address)"(member?: null): MemberRemovedEventFilter;
    MemberRemoved(member?: null): MemberRemovedEventFilter;

    "RateLimitSet(uint256,uint256)"(
      maxLimit?: null,
      limitIncreasePerBlock?: null
    ): RateLimitSetEventFilter;
    RateLimitSet(
      maxLimit?: null,
      limitIncreasePerBlock?: null
    ): RateLimitSetEventFilter;

    "ValidatorExitRequest(uint256,uint256,bytes)"(
      stakingModuleId?: PromiseOrValue<BigNumberish> | null,
      nodeOperatorId?: PromiseOrValue<BigNumberish> | null,
      validatorPubkey?: null
    ): ValidatorExitRequestEventFilter;
    ValidatorExitRequest(
      stakingModuleId?: PromiseOrValue<BigNumberish> | null,
      nodeOperatorId?: PromiseOrValue<BigNumberish> | null,
      validatorPubkey?: null
    ): ValidatorExitRequestEventFilter;
  };

  estimateGas: {
    MAX_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

    addOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleMembers(overrides?: CallOverrides): Promise<BigNumber>;

    removeOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportKeysToEject(
      stakingModuleIds: PromiseOrValue<BigNumberish>[],
      nodeOperatorIds: PromiseOrValue<BigNumberish>[],
      validatorPubkeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRateLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      _limitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_MEMBERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOracleMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportKeysToEject(
      stakingModuleIds: PromiseOrValue<BigNumberish>[],
      nodeOperatorIds: PromiseOrValue<BigNumberish>[],
      validatorPubkeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRateLimit(
      _maxLimit: PromiseOrValue<BigNumberish>,
      _limitIncreasePerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
